version: "3.0"
type: component
data:
  name: omv-network-dnshost-form-page
  type: tabsPage
  config:
    tabs:
      - type: form
        label: "No-IP"
        icon: "cloud"
        config:
          request:
            service: NetworkDnshost
            get:
              method: getSettings
            post:
              method: setSettings
          bindToController: true
          fields:
            - type: checkbox
              name: noip
              label: "Enable No-IP"
              value: false
              bind: { object: "settings", key: "noip" }
            - type: textInput
              name: noip_username
              label: "Username"
              value: ""
              bind: { object: "settings", key: "noip_username" }
              validators:
                required: { if: { operator: truthy, arg0: { prop: "noip" } } }
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "noip" } }
            - type: passwordInput
              name: noip_password
              label: "Password"
              bind: { object: "settings", key: "noip_password" }
              validators:
                required: { if: { operator: truthy, arg0: { prop: "noip" } } }
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "noip" } }
            - type: textInput
              name: noip_hostname
              label: "Hostname"
              bind: { object: "settings", key: "noip_hostname" }
              validators:
                required: { if: { operator: truthy, arg0: { prop: "noip" } } }
                pattern:
                  pattern: '^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}$'
                  errorData: "Invalid hostname format"
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "noip" } }
            - type: textInput
              name: noip_ip
              label: "Current IP"
              bind: { object: "settings", key: "noip_ip" }
              readOnly: true
              validators:
                pattern:
                  pattern: '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))){3}$'
                  errorData: _("Invalid IPv4 address format")
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "noip" } }
          buttons:
            - template: submit
              execute:
                type: rpc
                rpc:
                  service: NetworkDnshost
                  method: setSettings
                  params: {}
            - type: button
              text: "Update Now"
              icon: "refresh"
              execute:
                type: taskDialog
                taskDialog:
                  config:
                    title: "Updating No-IP"
                    startOnInit: true
                    request:
                      service: NetworkDnshost
                      method: updateIP
                      params:
                        provider: "noip"
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "noip" } }
            - type: button
              text: "Test Connection"
              icon: "network-check"
              execute:
                type: taskDialog
                taskDialog:
                  config:
                    title: "Testing No-IP Connection"
                    startOnInit: true
                    request:
                      service: NetworkDnshost
                      method: testConnection
                      params:
                        provider: "noip"
                  success:
                    type: display
                    display:
                      messageType: "success"
                      message: "Connection test successful: {{ response.message }}"
                  failure:
                    type: display
                    display:
                      messageType: "error"
                      message: "Connection test failed: {{ error.message }}"
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "noip" } }
      - type: form
        label: "Dynu DDNS"
        icon: "dns"
        config:
          request:
            service: NetworkDnshost
            get:
              method: getSettings
            post:
              method: setSettings
          bindToController: true
          fields:
            - type: checkbox
              name: ddns
              label: "Enable Dynu DDNS"
              bind: { object: "settings", key: "ddns" }
            - type: textInput
              name: ddns_username
              label: "Username"
              bind: { object: "settings", key: "ddns_username" }
              validators:
                required: { if: { operator: truthy, arg0: { prop: "ddns" } } }
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "ddns" } }
            - type: passwordInput
              name: ddns_password
              label: "Password"
              bind: { object: "settings", key: "ddns_password" }
              validators:
                required: { if: { operator: truthy, arg0: { prop: "ddns" } } }
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "ddns" } }
            - type: textInput
              name: ddns_hostname
              label: "Hostname"
              bind: { object: "settings", key: "ddns_hostname" }
              validators:
                required: { if: { operator: truthy, arg0: { prop: "ddns" } } }
                pattern:
                  pattern: '^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}$'
                  errorData: "Invalid hostname format"
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "ddns" } }
            - type: textInput
              name: ddns_ip
              label: "Current IP"
              bind: { object: "settings", key: "ddns_ip" }
              readOnly: true
              validators:
                pattern:
                  pattern: '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))){3}$'
                  errorData: _("Invalid IPv4 address format")
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "ddns" } }

          buttons:
            - template: submit
            - type: button
              text: "Update Now"
              icon: "refresh"
              execute:
                type: taskDialog
                taskDialog:
                  config:
                    title: "Updating Dynu DDNS"
                    startOnInit: true
                    request:
                      service: NetworkDnshost
                      method: updateIP
                      params:
                        provider: "ddns"
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "ddns" } }
            - type: button
              text: "Test Connection"
              icon: "network-check"
              execute:
                type: taskDialog
                taskDialog:
                  config:
                    title: "Testing Dynu DDNS Connection"
                    startOnInit: true
                    request:
                      service: NetworkDnshost
                      method: testConnection
                      params:
                        provider: "ddns"
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "ddns" } }
      - type: form
        label: "YDNS"
        icon: "public"
        config:
          request:
            service: NetworkDnshost
            get:
              method: getSettings
            post:
              method: setSettings
          bindToController: true
          fields:
            - type: checkbox
              name: ydns
              label: "Enable YDNS"
              bind: { object: "settings", key: "ydns" }
            - type: textInput
              name: ydns_username
              label: "Username"
              bind: { object: "settings", key: "ydns_username" }
              validators:
                required: { if: { operator: truthy, arg0: { prop: "ydns" } } }
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "ydns" } }
            - type: passwordInput
              name: ydns_password
              label: "Password"
              bind: { object: "settings", key: "ydns_password" }
              validators:
                required: { if: { operator: truthy, arg0: { prop: "ydns" } } }
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "ydns" } }
            - type: textInput
              name: ydns_hostname
              label: "Hostname"
              bind: { object: "settings", key: "ydns_hostname" }
              validators:
                required: { if: { operator: truthy, arg0: { prop: "ydns" } } }
                pattern:
                  pattern: '^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}$'
                  errorData: "Invalid hostname format"
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "ydns" } }
            - type: textInput
              name: ydns_ip
              label: "Current IP"
              bind: { object: "settings", key: "ydns_ip" }
              readOnly: true
              validators:
                pattern:
                  pattern: '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))){3}$'
                  errorData: _("Invalid IPv4 address format")
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "ydns" } }
          buttons:
            - template: submit
            - type: button
              text: "Update Now"
              icon: "refresh"
              execute:
                type: taskDialog
                taskDialog:
                  config:
                    title: "Updating YDNS"
                    startOnInit: true
                    request:
                      service: NetworkDnshost
                      method: updateIP
                      params:
                        provider: "ydns"
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "ydns" } }
            - type: button
              text: "Test Connection"
              icon: "network-check"
              execute:
                type: taskDialog
                taskDialog:
                  config:
                    title: "Testing YDNS Connection"
                    startOnInit: true
                    request:
                      service: NetworkDnshost
                      method: testConnection
                      params:
                        provider: "ydns"
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "ydns" } }
      - type: form
        label: "FreeDNS"
        icon: "lock-open"
        config:
          request:
            service: NetworkDnshost
            get:
              method: getSettings
            post:
              method: setSettings
          bindToController: true
          fields:
            - type: checkbox
              name: freedns
              label: "Enable FreeDNS"
              bind: { object: "settings", key: "freedns" }
            - type: textInput
              name: freedns_username
              label: "Username"
              bind: { object: "settings", key: "freedns_username" }
              validators:
                required: { if: { operator: truthy, arg0: { prop: "freedns" } } }
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "freedns" } }
            - type: passwordInput
              name: freedns_password
              label: "Password"
              bind: { object: "settings", key: "freedns_password" }
              validators:
                required: { if: { operator: truthy, arg0: { prop: "freedns" } } }
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "freedns" } }
            - type: textInput
              name: freedns_hostname
              label: "Hostname"
              bind: { object: "settings", key: "freedns_hostname" }
              validators:
                required: { if: { operator: truthy, arg0: { prop: "freedns" } } }
                pattern:
                  pattern: '^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}$'
                  errorData: "Invalid hostname format"
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "freedns" } }
            - type: textInput
              name: freedns_ip
              label: "Current IP"
              bind: { object: "settings", key: "freedns_ip" }
              readOnly: true
              validators:
                pattern:
                  pattern: '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))){3}$'
                  errorData: _("Invalid IPv4 address format")
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "freedns" } }
          buttons:
            - template: submit
            - type: button
              text: "Update Now"
              icon: "refresh"
              execute:
                type: taskDialog
                taskDialog:
                  config:
                    title: "Updating FreeDNS"
                    startOnInit: true
                    request:
                      service: NetworkDnshost
                      method: updateIP
                      params:
                        provider: "freedns"
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "freedns" } }
            - type: button
              text: "Test Connection"
              icon: "network-check"
              execute:
                type: taskDialog
                taskDialog:
                  config:
                    title: "Testing FreeDNS Connection"
                    startOnInit: true
                    request:
                      service: NetworkDnshost
                      method: testConnection
                      params:
                        provider: "freedns"
              modifiers:
                - type: visible
                  constraint: { operator: truthy, arg0: { prop: "freedns" } }
      - type: form
        label: "Schedule"
        icon: "schedule"
        config:
          fields:
            - type: hidden
              name: uuid
              bind: { object: "cron", key: "uuid" }
            - type: checkbox
              name: enable
              label: "Enable Automatic Updates"
              bind: { object: "cron", key: "enable" }
            - type: select
              name: frequency
              label: "Update Frequency"
              bind: { object: "cron", key: "frequency" }
              store:
                data:
                  - ["hourly", "Hourly"]
                  - ["daily", "Daily"]
                  - ["weekly", "Weekly"]
                  - ["monthly", "Monthly"]
            - type: container
              label: "Advanced Settings"
              collapsible: true
              collapsed: true
              fields:
                - type: textInput
                  name: custom_schedule
                  label: "Custom Cron Expression"
                  hint: "Leave empty for default frequency"
                  bind: { object: "cron", key: "custom_schedule" }
                  validators:
                    pattern:
                      pattern: '^[0-9*,-/]+ [0-9*,-/]+ [0-9*,-/]+ [0-9*,-/]+ [0-9*,-/]+$'
                      errorData: "Invalid cron format"
            - type: hidden
              name: command
              bind: { object: "cron", key: "command" }
              value: "/usr/sbin/omv-dnshost-cron"
            - type: hidden
              name: type
              bind: { object: "cron", key: "type" }
              value: "userdefined"
          buttons:
            - template: submit
              execute:
                type: rpc
                rpc:
                  service: Cron
                  method: set
                  params: {}
                confirmBeforeSubmit:
                  title: "Confirm Schedule Changes"
                  message: "Changing update frequency may affect your DNS service. Continue?"
            - type: button
              text: "Restore Defaults"
              icon: "restore"
              execute:
                type: rpc
                rpc:
                  service: Cron
                  method: setDefaults
                  params:
                    uuid: "32664b22-5a9d-11ec-8834-6f00f75b23dd"
              modifiers:
                - type: disabled
                  constraint: { operator: falsy, arg0: { prop: "enable" } }
            - text: _("Fix cron")
              execute:
                type: taskDialog
                taskDialog:
                  config:
                    title: _("Fixing cron task if deleted ...")
                    startOnInit: true
                    request:
                      service: NetworkDnshost
                      method: doFix
                    buttons:
                      stop:
                        hidden: true
                  successUrl: /network/dnshost
